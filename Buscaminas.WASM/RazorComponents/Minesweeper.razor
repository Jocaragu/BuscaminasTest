@inject HttpClient Http
@inject NavigationManager NavigationManager

<div >
	Mines potentially remaining: @currentGame?.GameBoard.PotentialMines
</div>

@if (currentGame?.Currentstate == Gamestate.Playing)
{
	<button class="btn-warning" @onmousedown="CharaClick" @onmouseup="CharaClick">@chara</button>
}
else if (currentGame?.Currentstate == Gamestate.Over)
{
	RIP();
	<button class="btn-danger" @onmousedown="CharaClick" @onmouseup="CharaClick">@chara</button>
	<button class="btn-info" style="float:inline-end" @onclick="RenderGame">Try again?</button>
}
else if (currentGame?.Currentstate == Gamestate.Won)
{
	YAY();
	<button class="btn-success" @onmousedown="CharaClick" @onmouseup="CharaClick">@chara</button>
	<button class="btn-info" @onclick="RenderGame">Try again?</button>
	<button class="btn-success" @onclick="SubmitScore">Submit score</button>
	<a >
		You won!, your score is: <b>@currentGame.Score</b>
	</a>
	<p>@scoreSubmission</p>
}

@if (currentGame?.GameBoard.Cells.Count > 0)
{
	<div oncontextmenu="return false">
		<div class="minesweeper-game" style="@Size()">
			<div class="minesweeper-board" style="@Size()">
				@foreach (var cell in currentGame.GameBoard.Cells)
				{
					if (cell.Revealed)
					{
						if (cell.Mined)
						{
							if (cell.SteppedOn)
							{
								<div class="cell mine-detonated" />
							}
							else
							{
								<div class="cell mine-missed" />
							}
						}
						else if (cell.Flagged)
						{
							<div class="cell misflagged-mine" />
						}
						else
						{
							string minesNearby = $"{cell.NearbyMines}";
							<div class="cell mines-nearby-@minesNearby" />
						}
					}
					else
					{
						if (cell.Flagged)
						{
							<div class="cell flagged" @oncontextmenu="cell.RightClick" />
						}
						else
						{
							<div class="cell unrevealed" @onclick="cell.LeftClick" @oncontextmenu="cell.RightClick" />
						}
					}
				}
			</div>
		</div>
	</div>
}

@code {
	[Parameter]
	[EditorRequired]
	public Player? TheBraveMiner { get; set; }

	[Parameter]
	[EditorRequired]
	public Level? Lvl { get; set; }

	private Game? currentGame;
	private string chara = string.Empty;
	private bool gameOver = false;
	private bool gameWon = false;
	private string scoreSubmission = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		await Task.Delay(1);
		RenderGame();
	}

	private void RenderGame()
	{
		if(Lvl!=null)
		{
			currentGame = new(Lvl.Width, Lvl.Height, Lvl.Mines);
			gameOver = false;
			gameWon = false;
			chara = "o_o";
		}
	}

	private void ChangeGameMode()
	{
		NavigationManager.NavigateTo($"/game/{TheBraveMiner?.Id}");
	}

	private string Size()
	{
		string gameStyle = $"width:{Lvl?.Width}cm; height:{Lvl?.Height}cm";
		return gameStyle;
	}

	private async void SubmitScore()
	{
		if (TheBraveMiner != null && currentGame != null)
		{
			TheBraveMiner.HighScore = currentGame.Score;

			var result = await Http.PutAsJsonAsync($"api/Lobby/{TheBraveMiner.Id}", TheBraveMiner);
			if (result.IsSuccessStatusCode)
			{
				scoreSubmission = "Score submitted successfully!";
				StateHasChanged();
			}
			else
			{
				scoreSubmission = "Error submitting your score, please try again...";
				StateHasChanged();
			}
		}
	}

	private void RIP()
	{
		if (!gameOver && !gameWon)
		{
			chara = "x_x";
			gameOver = true;
		}
	}

	private async void YAY()
	{
		if (!gameWon && !gameOver)
		{
			chara = "n_n";
			gameWon = true;
		}
		await Task.Delay(1);
	}
	private void CharaClick()
	{
		if (chara == "o_o")
		{
			chara = ">_<";
		}
		else if (chara == ">_<")
		{
			chara = "o_o";
		}
		else if (chara == "x_x")
		{
			chara = "X_X";
		}
		else if (chara == "X_X")
		{
			chara = "x_x";
		}
		else if (chara == "n_n")
		{
			chara = "^o^";
		}
		else if (chara == "^o^")
		{
			chara = "n_n";
		}
	}
}
